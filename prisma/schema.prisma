datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
  applications  Application[] 
 
}

model Post {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  category      String
  coverImage    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String         @db.ObjectId
  author        User           @relation(fields: [authorId], references: [id])
  comments      Comment[]
  viewCount     Int            @default(0)
  notifications Notification[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String   @db.ObjectId
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  post      Post     @relation(fields: [postId], references: [id])
  likedBy   String[]
 
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId  
  postId     String   @db.ObjectId
  createdAt  DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
}


model Application {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName    String
  lastName     String
  fatherName   String
  motherName   String
  birthDay     String
  bloodGroup   String
  mobileNumber String
  guardianNumber String
  gender       String
  religion     String
  fullAddress  String
  district     String
  education    String
  board        String
  rollNumber   String
  regNumber    String
  passingYear  String
  gpa          String
  nid          String
  nationality  String
  course       String
  duration     String
  status       String
  image        String
  email        String
  pc           String 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
}

model ApplyVisibility {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  button          String
}
model duration {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  button          String
}
